
````markdown
# CKA-Core-#2: Pods Crash, ReplicaSets Recover, Deployments Orchestrate

Let’s continue the CKA journey. This time, we break down three building blocks of workload management in Kubernetes — **Pods, ReplicaSets, and Deployments** — and understand why they exist together, not in isolation.

---

## 🔹 What is a Pod?

A **Pod** is the smallest deployable unit in Kubernetes, wrapping one or more containers that share storage, network, and lifecycle.  
While a Pod can have multiple containers, we typically stick to **one container per Pod** for simplicity.

❗ **Problem:**  
If a Pod crashes or the node fails, Kubernetes won’t recreate it unless managed by another controller.

---

### 🛠️ YAML Hack – Generate Pod YAML via CLI

```bash
kubectl run mypod --image=nginx --dry-run=client -o yaml > pod.yaml
````

---

### 📄 pod.yaml

```yaml
apiVersion: v1
kind: Pod
metadata:
  name: mypod
  labels:
    app: nginx
spec:
  containers:
    - name: nginx
      image: nginx
```

---

## 🔸 What is a ReplicaSet?

A **ReplicaSet** ensures that a specific number of **identical Pods** are always running.
It watches pods with matching labels and automatically replaces any that crash or get deleted.

📌 Key YAML elements:

* `replicas:` — how many pods you want
* `selector.matchLabels:` — to find which pods to manage
* `template:` — to define what kind of pods should be created

✅ **Solved:**
Automatic pod recreation, ensuring desired state is maintained.

❗ **Limitations:**
No support for rolling updates, rollbacks, or history tracking.

---

### 🛠️ YAML Hack – Generate ReplicaSet YAML via CLI

```bash
kubectl create rs myrs --image=nginx --replicas=2 --dry-run=client -o yaml > replicaset.yaml
```

---

### 📄 replicaset.yaml

```yaml
apiVersion: apps/v1
kind: ReplicaSet
metadata:
  name: myrs
  labels:
    app: nginx
spec:
  replicas: 2
  selector:
    matchLabels:
      app: nginx
  template:
    metadata:
      labels:
        app: nginx
    spec:
      containers:
        - name: nginx
          image: nginx
```

---

### 🔍 Understanding the Labels and Selectors (ReplicaSet)

* `metadata.labels` are the labels that are applied to the **kind of resource**, which in this case is the **ReplicaSet**.
* `spec.selector.matchLabels` defines **which Pods the ReplicaSet will monitor and manage**.
* `spec.template.metadata.labels` are the labels applied to the **Pods created by the ReplicaSet**.

✅ These labels **must match** the selector for the ReplicaSet to function correctly.

---

## 🟢 What is a Deployment?

A **Deployment** manages ReplicaSets and introduces full **version control**, **rolling updates**, and **rollback capabilities** — making it the standard for production-grade app delivery in Kubernetes.

✅ **Solved:**

* Rolling updates
* Rollbacks
* Declarative version management
* History tracking

---

### 🛠️ YAML Hack – Generate Deployment YAML via CLI

```bash
kubectl create deployment myapp --image=nginx --replicas=3 --dry-run=client -o yaml > deployment.yaml
```

---

### 📄 deployment.yaml

```yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: myapp
  labels:
    app: nginx
spec:
  replicas: 3
  selector:
    matchLabels:
      app: nginx
  template:
    metadata:
      labels:
        app: nginx
    spec:
      containers:
        - name: nginx
          image: nginx
```

---

### 🔍 Understanding the Labels and Selectors (Deployment)

* `metadata.labels` are the labels that are applied to the **kind of resource**, which in this case is the **Deployment**.
* `spec.selector.matchLabels` tells the Deployment **which Pods it should monitor and manage**.
* `spec.template.metadata.labels` are the labels assigned to the **Pods** that the Deployment creates.

✅ These must match to ensure the Deployment **owns** the Pods and can update or roll them back cleanly.

---

## 🔁 Final Thought

In Kubernetes, each layer builds on the previous:

* **Pods** run your application.
* **ReplicaSets** ensure they stay alive.
* **Deployments** control how they evolve.

These abstractions may seem layered, but they each solve a real-world problem in workload management.

---
